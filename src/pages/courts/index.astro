---
import Layout from '../../layouts/Layout.astro';
import clientPromise from '../../lib/mongodb';
import { enrichCourtData } from '../../lib/enrichCourt';

// Constants
const ITEMS_PER_PAGE = 9;

// Connect to MongoDB
const client = await clientPromise;
const db = client.db('google_maps_data');

// Get total count for pagination
const totalCourts = await db.collection('pickleball_courts').countDocuments();
const totalPages = Math.ceil(totalCourts / ITEMS_PER_PAGE);

// Get initial page of courts
const initialPage = 1;
const skip = (initialPage - 1) * ITEMS_PER_PAGE;

let courts = await db.collection('pickleball_courts')
  .find({})
  .skip(skip)
  .limit(ITEMS_PER_PAGE)
  .toArray();

// Get unique states and countries for filters
const stateAggregation = await db.collection('pickleball_courts').aggregate([
  { $group: { _id: "$state", count: { $sum: 1 } } },
  { $sort: { count: -1 } }
]).toArray();

const countryAggregation = await db.collection('pickleball_courts').aggregate([
  { $group: { _id: "$countryCode", count: { $sum: 1 } } }
]).toArray();

// Transform initial courts data
const courtsData = courts.map(court => ({
  id: court._id.toString(),
  slug: court.title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, ''),
  title: court.title,
  state: court.state,
  countryCode: court.countryCode,
  imageUrl: court.images?.[0] || court.imageUrl || '/images/default-court.jpg',
  images: court.images || [],
  description: court.description,
  address: court.address,
  totalScore: court.totalScore || 4.0,
  rating: court.totalScore || 4.0,
  reviewsCount: court.reviewsCount || 0,
  categories: court.categories || ['Pickleball Court'],
  openingHours: court.openingHours || [],
  socialLinks: court.socialLinks || [],
  amenities: court.additionalInfo?.Amenities || [],
  capacity: court.capacity || null,
  lastUpdated: court.lastUpdated || null,
  url: `/courts/${court._id}`
}));

const uniqueStates = stateAggregation
  .map(item => item._id)
  .filter((state): state is string => Boolean(state))
  .sort((a, b) => {
    const countA = stateAggregation.find(s => s._id === a)?.count ?? 0;
    const countB = stateAggregation.find(s => s._id === b)?.count ?? 0;
    return countB - countA;
  });

interface CountryInfo {
  code: string;
  name: string;
  count: number;
}

const uniqueCountries = countryAggregation
  .map(item => {
    if (!item?._id) return null;
    if (item._id === 'IN') return { code: 'IN', name: 'India', count: item.count } as CountryInfo;
    if (item._id === 'US') return { code: 'US', name: 'United States', count: item.count } as CountryInfo;
    return null;
  })
  .filter((country): country is CountryInfo => Boolean(country))
  .sort((a, b) => b.count - a.count)
  .map(item => item.name);

// Pass initial data to the client
const initialData = {
  courts: courtsData,
  totalCourts,
  totalPages,
  currentPage: initialPage
};
---

<Layout title="Pickleball Courts">
  <!-- Loading Overlay -->
  <div 
    id="loadingOverlay" 
    class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center transition-opacity duration-300"
    style="display: none;"
  >
    <div class="text-center p-8 rounded-2xl bg-white/10 backdrop-blur-md">
      <div class="w-20 h-20 border-4 border-pink-500 border-t-transparent rounded-full animate-spin mb-4 mx-auto"></div>
      <p class="text-white text-xl font-medium">Loading courts...</p>
      <p class="text-white/70 text-sm mt-2">Please wait while we fetch the courts</p>
    </div>
  </div>

  <div class="max-w-7xl mx-auto px-4 py-8">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-white mb-2">Find Pickleball Courts</h1>
      <p class="text-lg text-white/70">Discover places to play near you</p>
    </div>

    <!-- Search and Filter Controls -->
    <div class="mb-8 bg-white p-6 rounded-2xl shadow-lg border border-gray-100 backdrop-blur-sm">
      <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-1">
          <div class="relative group">
            <input 
              type="text" 
              id="searchInput"
              placeholder="Search by court name..."
              class="w-full p-4 pl-12 border border-gray-200 bg-white/50 rounded-xl shadow-sm focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all duration-300 group-hover:border-pink-300"
            />
            <svg class="absolute left-4 top-4 h-5 w-5 text-gray-400 group-hover:text-pink-500 transition-colors" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
            </svg>
          </div>
        </div>

        <div class="flex flex-col md:flex-row gap-3">
          <select 
            id="stateFilter"
            class="w-full md:w-48 p-4 border border-gray-200 text-gray-700 md:text-base text-md bg-white/50 rounded-xl shadow-sm focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all duration-300 hover:border-pink-300"
          >
            <option value="all" class="text-gray-700">All States/Regions</option>
            {uniqueStates.map(state => (
              <option value={state}>{state}</option>
            ))}
          </select>

          <select 
            id="countryFilter"
            class="w-full md:w-48 p-4 border border-gray-200 text-gray-700 bg-white/50 rounded-xl shadow-sm focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all duration-300 hover:border-pink-300"
          >
            <option value="all">All Countries</option>
            {uniqueCountries.map(country => (
              <option value={country}>{country}</option>
            ))}
          </select>

          <button 
            id="resetFilters"
            class="px-6 py-4 bg-gray-50 text-gray-700 font-medium rounded-xl hover:bg-pink-50 hover:text-pink-600 focus:outline-none focus:ring-2 focus:ring-pink-200 transition-all duration-300 shadow-sm hover:shadow-md"
          >
            Clear
          </button>
        </div>
      </div>
    </div>

    <!-- Results Summary -->
    <div class="mb-6 flex justify-between items-center">
      <div class="text-sm text-gray-600">
        Showing <span id="visibleCount" class="font-medium">{ITEMS_PER_PAGE}</span> of 
        <span id="totalCount" class="font-medium">{totalCourts}</span> courts
      </div>
      <div class="text-sm text-gray-500">
        Page <span id="currentPageDisplay">{initialPage}</span> of {totalPages}
      </div>
    </div>

    <div id="noResults" class="hidden text-center py-12 bg-gray-50 rounded-xl">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h3 class="mt-4 text-lg font-medium text-gray-900">No courts found</h3>
      <p class="mt-1 text-gray-500">Try adjusting your search or filters</p>
    </div>

    <!-- Courts Grid -->
    <div id="courtsGrid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      {courtsData.map((court, index) => (
        <div 
          class="court-card bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 transform transition-all duration-500 hover:shadow-2xl hover:scale-105"
          data-state={court.state}
          data-country={court.countryCode}
          data-name={court.title.toLowerCase()}
          style={`animation: fadeIn 0.6s ease-out ${index * 0.1}s both;`}
        >
          <a href={`/courts/${court.slug}`} class="block">
            <div class="relative overflow-hidden group h-64">
              <div class="carousel-container relative w-full h-full">
                {(Array.isArray(court.images) && court.images.length > 0 ? court.images : [court.imageUrl]).map((image: string, idx: number) => (
                  <div 
                    class={`carousel-slide absolute inset-0 transition-opacity duration-500 ${idx === 0 ? 'opacity-100' : 'opacity-0'}`}
                    data-index={idx}
                  >
                    <img 
                      src={image} 
                      alt={`${court.title} - Image ${idx + 1}`}
                      class="w-full h-full object-cover transform transition-transform duration-700 group-hover:scale-110"
                      loading="lazy"
                    />
                  </div>
                ))}

                {court.images?.length > 1 && (
                  <>
                    <div class="absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-1">
                      {court.images.map((_, idx) => (
                        <button 
                          class={`w-2 h-2 rounded-full transition-colors duration-300 ${idx === 0 ? 'bg-white' : 'bg-white/50'}`}
                          data-index={idx}
                        >
                        </button>
                      ))}
                    </div>
                  </>
                )}
              </div>

              <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent">
                <div class="absolute bottom-0 left-0 right-0 p-6 transform transition-all duration-300">
                  <h2 class="text-2xl font-bold text-white mb-2 transform transition-transform duration-300 translate-y-0 group-hover:translate-y-[-8px]">
                    {court.title}
                  </h2>
                  <p class="text-gray-200 text-sm transform transition-all duration-300 opacity-0 translate-y-4 group-hover:opacity-100 group-hover:translate-y-0">
                    {court.address}
                  </p>
                </div>
              </div>
            </div>
          </a>

          <div class="p-6">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center gap-2">
                <div class="flex">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <svg 
                      class={`h-5 w-5 ${star <= Math.round(court.totalScore) ? 'text-yellow-400' : 'text-gray-200'} transition-colors duration-300`}
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
                <span class="font-semibold text-gray-700">{court.totalScore.toFixed(1)}</span>
              </div>
              <span class="text-sm text-gray-500">
                {court.reviewsCount} reviews
              </span>
            </div>
            <div class="h-32">
            <div class="flex flex-wrap gap-2 mb-4">
              {court.categories.map(category => (
                <span class="inline-flex px-3 py-1.5 bg-pink-50 font-poppins text-pink-700 text-sm font-medium rounded-full transform transition-all duration-300 hover:scale-105 hover:shadow-sm">
                  {category}
                </span>
              ))}
            </div>
          </div>

            <div class="flex justify-between items-center mt-6 gap-4 pt-4 border-t border-gray-100">
              <a 
                href={`/courts/${court.slug}`}
                class="group flex items-center text-pink-600 hover:text-pink-700 font-medium transition-colors duration-300"
              >
                View details
                <svg 
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 ml-2 transform transition-transform duration-300 rotate-0 group-hover:-rotate-45"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </a>
              <a
                href={court.url}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-4 py-2 bg-pink-600 text-white text-sm font-medium rounded-lg transition-all duration-300 hover:bg-pink-700 hover:shadow-lg active:transform active:scale-95"
              >
                Directions
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </a>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Client-side Pagination -->
    <div class="mt-12 flex justify-center items-center gap-2">
      <button 
        id="prevPage"
        class="px-4 py-2 bg-white text-gray-700 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        disabled
      >
        Previous
      </button>
      
      <div id="pageNumbers" class="flex gap-2">
        <!-- Page numbers will be inserted here -->
      </div>

      <button 
        id="nextPage"
        class="px-4 py-2 bg-white text-gray-700 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
      >
        Next
      </button>
    </div>
  </div>
</Layout>

<script define:vars={{ initialData, ITEMS_PER_PAGE }}>
  console.log('🚀 Initializing courts page with data:', initialData);

  // Constants and DOM elements
  const loadingOverlay = document.getElementById('loadingOverlay');
  const stateFilter = document.getElementById('stateFilter');
  const countryFilter = document.getElementById('countryFilter');
  const searchInput = document.getElementById('searchInput');
  const resetButton = document.getElementById('resetFilters');
  const courtsGrid = document.getElementById('courtsGrid');
  const noResults = document.getElementById('noResults');
  const visibleCount = document.getElementById('visibleCount');
  const totalCountElem = document.getElementById('totalCount');
  const prevPageBtn = document.getElementById('prevPage');
  const nextPageBtn = document.getElementById('nextPage');
  const pageNumbers = document.getElementById('pageNumbers');
  const currentPageDisplay = document.getElementById('currentPageDisplay');

  console.log('📌 DOM elements loaded:', {
    hasLoadingOverlay: !!loadingOverlay,
    hasStateFilter: !!stateFilter,
    hasCountryFilter: !!countryFilter,
    hasSearchInput: !!searchInput,
    hasResetButton: !!resetButton,
    hasCourtsGrid: !!courtsGrid,
    hasNoResults: !!noResults,
    hasVisibleCount: !!visibleCount,
    hasTotalCount: !!totalCountElem,
    hasPrevBtn: !!prevPageBtn,
    hasNextBtn: !!nextPageBtn,
    hasPageNumbers: !!pageNumbers,
    hasCurrentPageDisplay: !!currentPageDisplay
  });

  let currentPage = initialData.currentPage;
  let filteredCourts = initialData.courts;
  let currentTotalPages = initialData.totalPages;
  let isLoading = false;

  // Show/hide loading overlay
  function showLoading() {
    console.log('⌛ Showing loading overlay');
    if (loadingOverlay) {
      loadingOverlay.style.display = 'flex';
      loadingOverlay.classList.remove('opacity-0');
    }
    isLoading = true;
  }

  function hideLoading() {
    console.log('✅ Hiding loading overlay');
    if (loadingOverlay) {
      loadingOverlay.classList.add('opacity-0');
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
      }, 300);
    }
    isLoading = false;
  }

  // Fetch courts for a specific page
  async function fetchCourtsForPage(page, filters = {}) {
    console.log('🔄 Fetching courts for page', page, 'with filters:', filters);
    showLoading();
    try {
      // Only include non-empty and non-'all' filters
      const queryParams = new URLSearchParams();
      queryParams.append('page', page.toString());
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value && value !== 'all') {
          queryParams.append(key, value);
        }
      });

      const url = `/api/courts?${queryParams}`;
      console.log('🌐 Fetching from URL:', url);

      const response = await fetch(url);
      if (!response.ok) {
        console.error('❌ API request failed:', response.status, response.statusText);
        throw new Error('Failed to fetch courts');
      }
      
      const data = await response.json();
      console.log('📦 Received data:', data);
      return data;
    } catch (error) {
      console.error('❌ Error fetching courts:', error);
      return { courts: [], totalCourts: 0, totalPages: 1 };
    } finally {
      hideLoading();
    }
  }

  // Filter function
  async function filterCourts() {
    const selectedState = stateFilter?.value;
    const selectedCountry = countryFilter?.value;
    const searchTerm = searchInput?.value?.trim() || '';

    console.log('🔍 Filtering courts with:', {
      state: selectedState,
      country: selectedCountry,
      search: searchTerm
    });

    const filters = {};
    if (selectedState && selectedState !== 'all') {
      filters.state = selectedState;
    }
    if (selectedCountry && selectedCountry !== 'all') {
      filters.country = selectedCountry;
    }
    if (searchTerm) {
      filters.search = searchTerm;
    }

    currentPage = 1;
    const data = await fetchCourtsForPage(currentPage, filters);
    
    filteredCourts = data.courts;
    currentTotalPages = data.totalPages;
    
    console.log('📊 Filtered results:', {
      courtsCount: filteredCourts.length,
      totalPages: currentTotalPages
    });

    if (visibleCount) {
      visibleCount.textContent = data.courts.length.toString();
    }
    if (totalCountElem) {
      totalCountElem.textContent = data.totalCourts.toString();
    }

    if (noResults) {
      noResults.style.display = data.courts.length === 0 ? 'block' : 'none';
    }

    displayCurrentPage();
    updatePagination();
  }

  // Pagination functions
  function displayCurrentPage() {
    if (!courtsGrid) return;

    // Update visible count
    if (visibleCount && filteredCourts) {
      visibleCount.textContent = filteredCourts.length.toString();
    }

    // Generate HTML for current page courts
    if (filteredCourts && filteredCourts.length > 0) {
      courtsGrid.innerHTML = filteredCourts.map((court, index) => `
        <div 
          class="court-card bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 transform transition-all duration-500 hover:shadow-2xl hover:scale-105"
          data-state="${court.state}"
          data-country="${court.countryCode}"
          data-name="${court.title.toLowerCase()}"
          style="animation: fadeIn 0.6s ease-out ${index * 0.1}s both;"
        >
          <a href="/courts/${court.slug}" class="block">
            <div class="relative overflow-hidden group h-64">
              <img 
                src="${court.imageUrl}" 
                alt="${court.title}"
                class="w-full h-full object-cover transform transition-transform duration-700 group-hover:scale-110"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent">
                <div class="absolute bottom-0 left-0 right-0 p-6">
                  <h2 class="text-2xl font-bold text-white mb-2">${court.title}</h2>
                  <p class="text-gray-200 text-sm">${court.address}</p>
                </div>
              </div>
            </div>
          </a>

          <div class="p-6">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center gap-2">
                <div class="flex">
                  ${[1, 2, 3, 4, 5].map(star => `
                    <svg 
                      class="h-5 w-5 ${star <= Math.round(court.totalScore) ? 'text-yellow-400' : 'text-gray-200'}"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  `).join('')}
                </div>
                <span class="font-semibold text-gray-700">${court.totalScore.toFixed(1)}</span>
              </div>
              <span class="text-sm text-gray-500">${court.reviewsCount} reviews</span>
            </div>

            <div class="h-32">
              <div class="flex flex-wrap gap-2 mb-4">
                ${court.categories.map(category => `
                  <span class="inline-flex px-3 py-1.5 bg-pink-50 text-pink-700 text-sm font-medium rounded-full">
                    ${category}
                  </span>
                `).join('')}
              </div>
            </div>

            <div class="flex justify-between items-center mt-6 gap-4 pt-4 border-t border-gray-100">
              <a 
                href="/courts/${court.slug}"
                class="group flex items-center text-pink-600 hover:text-pink-700 font-medium"
              >
                View details
                <svg 
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 ml-2 transform group-hover:-rotate-45"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </a>
              <a
                href="${court.url}"
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-4 py-2 bg-pink-600 text-white text-sm font-medium rounded-lg hover:bg-pink-700"
              >
                Directions
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </a>
            </div>
          </div>
        </div>
      `).join('');
    } else {
      // Show no results message if no courts are found
      if (noResults) {
        noResults.style.display = 'block';
      }
      courtsGrid.innerHTML = '';
    }
    updateCurrentPageDisplay();
  }

  // Update current page display
  function updateCurrentPageDisplay() {
    if (currentPageDisplay) {
      currentPageDisplay.textContent = currentPage.toString();
    }
  }

  // Update pagination functions
  async function changePage(newPage) {
    if (newPage === currentPage) return;
    
    currentPage = newPage;
    
    // Get current filter values
    const filters = {};
    const selectedState = stateFilter?.value;
    const selectedCountry = countryFilter?.value;
    const searchTerm = searchInput?.value?.trim() || '';

    if (selectedState && selectedState !== 'all') {
      filters.state = selectedState;
    }
    if (selectedCountry && selectedCountry !== 'all') {
      filters.country = selectedCountry;
    }
    if (searchTerm) {
      filters.search = searchTerm;
    }

    const data = await fetchCourtsForPage(currentPage, filters);
    filteredCourts = data.courts;
    currentTotalPages = data.totalPages;

    if (visibleCount) {
      visibleCount.textContent = data.courts.length.toString();
    }
    if (totalCountElem) {
      totalCountElem.textContent = data.totalCourts.toString();
    }

    // Hide no results message initially
    if (noResults) {
      noResults.style.display = 'none';
    }

    displayCurrentPage();
    updatePagination();
  }

  // Update the page number click handler
  function updatePagination() {
    if (!prevPageBtn || !nextPageBtn || !pageNumbers) return;
    
    // Update button states
    prevPageBtn.disabled = currentPage === 1;
    nextPageBtn.disabled = currentPage === currentTotalPages;

    // Clear existing page numbers
    pageNumbers.innerHTML = '';
    
    // Create page number buttons
    for (let i = 1; i <= currentTotalPages; i++) {
      if (
        i === 1 || 
        i === currentTotalPages || 
        (i >= currentPage - 1 && i <= currentPage + 1)
      ) {
        const button = document.createElement('button');
        button.className = `px-3 py-1 rounded-lg transition-colors ${
          currentPage === i 
            ? 'bg-pink-600 text-white'
            : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'
        }`;
        button.textContent = i.toString();
        button.addEventListener('click', () => changePage(i));
        pageNumbers.appendChild(button);
      } else if (
        (i === 2 && currentPage > 3) ||
        (i === currentTotalPages - 1 && currentPage < currentTotalPages - 2)
      ) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'px-2 text-gray-500';
        ellipsis.textContent = '...';
        pageNumbers.appendChild(ellipsis);
      }
    }
    updateCurrentPageDisplay();
  }

  // Update prev/next button handlers
  prevPageBtn?.addEventListener('click', () => {
    if (currentPage > 1) {
      changePage(currentPage - 1);
    }
  });

  nextPageBtn?.addEventListener('click', () => {
    if (currentPage < currentTotalPages) {
      changePage(currentPage + 1);
    }
  });

  // Event listeners
  stateFilter?.addEventListener('change', filterCourts);
  countryFilter?.addEventListener('change', filterCourts);
  searchInput?.addEventListener('input', filterCourts);
  
  resetButton?.addEventListener('click', () => {
    if (stateFilter) stateFilter.value = 'all';
    if (countryFilter) countryFilter.value = 'all';
    if (searchInput) searchInput.value = '';
    currentPage = 1;
    filterCourts();
  });

  // Initial setup
  window.addEventListener('DOMContentLoaded', () => {
    console.log('🎬 Page loaded, initializing...');
    displayCurrentPage(); // Display initial courts first
    updatePagination(); // Update pagination with initial data
    hideLoading();
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .court-card {
    backface-visibility: hidden;
    -webkit-font-smoothing: antialiased;
    transform-style: preserve-3d;
    transform: translateZ(0);
  }

  .court-card:hover {
    transform: translateZ(0) scale(1.05);
  }

  /* Improve input and select styles */
  input, select {
    @apply appearance-none;
    background-image: linear-gradient(to bottom, transparent, rgba(255,255,255,0.8));
  }

  select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
  }

  /* Add smooth transition for all transforms */
  .transform {
    transition-property: transform, opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  /* Smooth transitions */
  .transition-opacity {
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  #loadingOverlay {
    opacity: 1;
    transition: opacity 0.3s ease-out;
  }
  
  #loadingOverlay.opacity-0 {
    opacity: 0;
  }
</style>
