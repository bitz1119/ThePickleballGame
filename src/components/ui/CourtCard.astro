---
interface Props {
  court: {
    slug: string;
    title: string;
    state: string;
    countryCode: string;
    imageUrl: string;
    images: string[];
    address: string;
    totalScore: number;
    reviewsCount: number;
    categories: string[];
    url: string;
    distance?: number;
  };
  index: number;
}

const { court, index } = Astro.props;

function formatDistance(distance: number): string {
  if (distance < 1) {
    return `${Math.round(distance * 1000)} m`;
  }
  return `${Math.round(distance * 10) / 10} km`;
}
---

<div 
  class="court-card bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 transform transition-all duration-500 hover:shadow-2xl hover:scale-105"
  data-state={court.state}
  data-country={court.countryCode}
  data-name={court.title.toLowerCase()}
  style={`animation: fadeIn 0.6s ease-out ${index * 0.1}s both;`}
>
  <a href={`/courts/${court.slug}`} class="block">
    <div class="relative overflow-hidden group h-64">
      <div class="carousel-container relative w-full h-full">
        {(Array.isArray(court.images) && court.images.length > 0 ? court.images : [court.imageUrl]).map((image: string, idx: number) => (
          <div 
            class={`carousel-slide absolute inset-0 transition-opacity duration-500 ${idx === 0 ? 'opacity-100' : 'opacity-0'}`}
            data-index={idx}
          >
            <img 
              src={image} 
              alt={`${court.title} - Image ${idx + 1}`}
              class="w-full h-full object-cover transform transition-transform duration-700 group-hover:scale-110"
              loading="lazy"
            />
          </div>
        ))}

        {court.images?.length > 1 && (
          <div class="absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-1">
            {court.images.map((_, idx) => (
              <button 
                class={`w-2 h-2 rounded-full transition-colors duration-300 ${idx === 0 ? 'bg-white' : 'bg-white/50'}`}
                data-index={idx}
              >
              </button>
            ))}
          </div>
        )}
      </div>

      <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent">
        <div class="absolute bottom-0 left-0 right-0 p-6">
          <h2 class="text-2xl font-bold text-white mb-2">{court.title}</h2>
          <p class="text-gray-200 text-sm">{court.address}</p>
          {court.distance !== undefined && (
            <p class="text-yellow-400 text-sm mt-2 flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {formatDistance(court.distance)} away
            </p>
          )}
        </div>
      </div>
    </div>
  </a>

  <div class="p-6">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-2">
        <div class="flex">
          {[1, 2, 3, 4, 5].map((star) => (
            <svg 
              class={`h-5 w-5 ${star <= Math.round(court.totalScore) ? 'text-yellow-400' : 'text-gray-200'} transition-colors duration-300`}
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          ))}
        </div>
        <span class="font-semibold text-gray-700">{court.totalScore.toFixed(1)}</span>
      </div>
      <span class="text-sm text-gray-500">
        {court.reviewsCount} reviews
      </span>
    </div>
    <div class="h-32">
      <div class="flex flex-wrap gap-2 mb-4">
        {court.categories.map(category => (
          <span class="inline-flex px-3 py-1.5 bg-pink-50 font-poppins text-pink-700 text-sm font-medium rounded-full transform transition-all duration-300 hover:scale-105 hover:shadow-sm">
            {category}
          </span>
        ))}
      </div>
    </div>

    <div class="flex justify-between items-center mt-6 gap-4 pt-4 border-t border-gray-100">
      <a 
        href={`/courts/${court.slug}`}
        class="group flex items-center text-pink-600 hover:text-pink-700 font-medium transition-colors duration-300"
      >
        View details
        <svg 
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 ml-2 transform transition-transform duration-300 rotate-0 group-hover:-rotate-45"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
        </svg>
      </a>
      <a
        href={court.url}
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center px-4 py-2 bg-pink-600 text-white text-sm font-medium rounded-lg transition-all duration-300 hover:bg-pink-700 hover:shadow-lg active:transform active:scale-95"
      >
        Directions
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      </a>
    </div>
  </div>
</div>

<style>
  .court-card {
    backface-visibility: hidden;
    -webkit-font-smoothing: antialiased;
    transform-style: preserve-3d;
    transform: translateZ(0);
  }

  .court-card:hover {
    transform: translateZ(0) scale(1.05);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 