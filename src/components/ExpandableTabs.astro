---
import { Icon } from 'astro-icon/components';
import Dropdown from './Dropdown.astro';
import type { TabItem } from '../data/navigation';

interface Separator {
  type: "separator";
  title?: never;
  icon?: never;
  href?: never;
}

type TabItem = TabItem | Separator;

interface Props {
  tabs: TabItem[];
  categories?: Array<{
    title: string;
    slug: string;
    icon?: string;
  }>;
  activeColor?: string;
  className?: string;
}

const {
  tabs,
  categories = [],
  activeColor = "text-gray-900",
  className = "",
} = Astro.props;

---

<div
  id="expandable-tabs"
  class:list={[
    "flex flex-wrap items-center gap-2 rounded-2xl border bg-background p-1 shadow-sm",
    className
  ]}
>
  <style>
    .tab-title {
      transition: opacity 0.6s ease, transform 0.6s ease, max-width 0.6s ease;
      opacity: 0;
      transform: translateX(-10px);
      max-width: 0;
      overflow: hidden;
      white-space: nowrap;
      pointer-events: none;
    }

    .expandable-tab:hover .tab-title {
      opacity: 1;
      transform: translateX(0);
      max-width: 100px;
    }

    .expandable-tab {
      transition: all 0.3s ease;
    }
    
    .expandable-tab:hover {
      background-color: rgba(0, 0, 0, 0.8);
    }
    
    .expandable-tab:hover .tab-title,
    .expandable-tab:hover .expandable-tab-icon {
      color: white;
    }
    
    .expandable-tab-icon {
      color: black;
      transition: color 0.3s ease;
    }

    .dropdown-menu {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      min-width: 200px;
      background: white;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      z-index: 50;
      margin-top: 0.5rem;
    }

    .blog-tab-container:hover .dropdown-menu {
      display: block;
    }
  </style>

  {tabs.map((tab, index) => {
    if ('type' in tab && tab.type === "separator") {
      return <div class="bg-border items-center justify-between" aria-hidden="true"></div>;
    }

    if (tab.title === "Blog") {
      const blogItems = categories.map(category => ({
        title: category.title,
        href: `/${category.slug}`,
        icon: category.icon || "lucide:file-text"
      }));

      return (
        <div class="relative group">
          <a
            href={tab.href}
            class:list={[
              "expandable-tab relative flex items-center rounded-xl px-2 py-2 text-sm font-medium"
            ]}
          >
            <Icon name={tab.icon} size={20} class="expandable-tab-icon" />
            <span class="tab-title ml-2">{tab.title}</span>
          </a>

          <Dropdown
            items={blogItems}
            label={tab.title}
            icon={tab.icon}
            className="absolute left-0 mt-2 w-48 rounded-lg shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 dark:divide-gray-700 focus:outline-none opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform -translate-y-2 group-hover:translate-y-0"
          />
        </div>
      );
    }

    return (
      <a
        href={'href' in tab ? tab.href : '#'}
        data-index={index}
        class:list={[
          "expandable-tab relative flex items-center rounded-xl px-2 py-2 text-sm font-medium"
        ]}
      >
        <Icon name={tab.icon} size={20} class="expandable-tab-icon"/>
        <span class="tab-title ml-2">{tab.title}</span>
      </a>
    );
  })}
</div>